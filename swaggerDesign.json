{
  "swagger": "2.0",
  "info": {
    "description": "This is an API server for a portfolio builder website.\n",
    "version": "1.0.0",
    "title": "Portfolio Builder",
    "contact": {
      "email": "okoyee61@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "theme",
      "description": "Operations about themes"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "Not Yet Implemented",
      "description": "These API endpoints are designed and will be created in the near future"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/theme": { 
      "get": {
        "tags": ["theme"],
        "summary": "Get all themes",
        "description": "Retrieve a list of all available themes.",
        "operationId": "getAllThemes",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Successful operation, returns an array of themes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Theme"
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": ["theme"],
        "summary": "Create a new theme",
        "description": "Add a new theme to the database.",
        "operationId": "createTheme",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Theme object to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThemeInput" 
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Theme created successfully",
            "schema": {
              "$ref": "#/definitions/Theme"
            }
          },
          "400": {
            "description": "Invalid input, theme name might be missing"
          },
          "500": {
            "description": "Error occurred while creating the theme"
          }
        }
      }
    },
    "/theme/{themeName}": {
      "get": {
        "tags": ["theme"],
        "summary": "Finds Themes by name",
        "description": "Each theme has a unique name, this will basically find a single theme by an exact name almost like an id",
        "operationId": "findThemeByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "themeName",
            "in": "path",
            "description": "Theme name string is required and functions as id",
            "required": true,
            "type": "string"
            
          }
        ],
        "security": [
          {
            "petstore_auth": ["write:pets", "read:pets"]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Theme" 
            }
          },
          "400": {
            "description": "Invalid theme name value"
          },
          "404": {
            "description": "Theme not found"
          }
        }
      },
      "put": {
        "tags": ["theme"],
        "summary": "Update an existing theme by name",
        "description": "Update details of a theme given its name.",
        "operationId": "updateThemeByName",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "themeName",
            "in": "path",
            "description": "Name of the theme to update",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Theme object with updated properties",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ThemeInput" 
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Theme updated successfully",
            "schema": {
              "$ref": "#/definitions/Theme"
            }
          },
          "400": {
            "description": "Invalid input or update data is empty"
          },
          "404": {
            "description": "Theme not found"
          },
          "500": {
            "description": "Error updating theme"
          }
        }
      },
      "delete": {
        "tags": ["theme"],
        "summary": "Delete a theme by name",
        "description": "Remove a theme from the database using its name.",
        "operationId": "deleteThemeByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "themeName",
            "in": "path",
            "description": "Name of the theme to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Theme deleted successfully (No Content)"
          },
          "404": {
            "description": "Theme not found"
          },
          "500": {
            "description": "Error deleting theme"
          }
        }
      }
    },
      
    "/user/login": {
      "get": {
        "tags": ["Not Yet Implemented"],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["Not Yet Implemented"],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully modified user"
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted user"
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user": {
      "get": {
        "tags": ["user"],
        "summary": "Get all users",
        "operationId": "getAllUsers",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array", 
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "500": {
            "description": "Error occurred"
          }
        }
      },
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This is for when a user creates an account.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Credentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully created user",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string",
                  "example": "Nike Theme"
                }
              }
            }
          },
          "400": {
            "description": "Invalid user name value"
          },
          "500": {
            "description": "Error occurred while creating the user"
          }
        }
      }
    }
  },
  
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": ["password", "username"],
      "properties": {
        "_id": {
          "type": "string", 
          "format": "string"
        },
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/User_info"
        },
        "profile": {
          "$ref": "#/definitions/User_profile"
        }
      }
    },
    "Theme": {
      "type": "object",
      "required": ["themeName", "color", "layout"], 
      "properties": {
        "_id": { 
          "type": "string"
        },
        "themeName": { 
          "type": "string",
          "example": "Nike Theme"
        },
        "color": { 
          "type": "string",
          "example": "#000000"
        },
        "layout": {
          "type": "string",
          "example": "full-width"
        },
        "fontSize": {
          "type": "integer",
          "example": 18
        },
        "fontFamily": {
          "type": "string",
          "example": "futura"
        },
        "inspiration": {
          "type": "string",
          "example": "https://www.nike.com/"
        },
        "colors": {
          "type": "array",
          "example": ["#000", "#111", "#fff"], 
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ThemeInput": { 
      "type": "object",
      "properties": {
        "themeName": { "type": "string", "example": "New Theme" },
        "color": { "type": "string", "example": "#FF0000" },
        "layout": { "type": "string", "example": "grid" }
      },
      "required": ["themeName", "color", "layout"]
    },
    "Credentials": {
      "type": "object",
      "required": ["password", "username"],
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "User_info": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "currentLocation": {
          "type": "string"
        },
        "openToNewOpportunities": {
          "type": "boolean"
        },
        "profileIsPublic": {
          "type": "boolean"
        },
        "theme_name": {
          "type": "string"
        }
      }
    },
    "User_profile_experience": {
      "type": "object",
      "properties": {
        "jobTitle": {
          "type": "string"
        },
        "jobDescription": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dateStart": {
          "type": "string"
        },
        "dateEnd": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "location": {
          "type": "string"
        }
      }
    },
    "User_profile_education": {
      "type": "object",
      "properties": {
        "institution": {
          "type": "string"
        },
        "programTitle": {
          "type": "string"
        },
        "programDescription": {
          "type": "string"
        },
        "dateStart": {
          "type": "string"
        },
        "dateEnd": {
          "type": "string"
        },
        "completed": {
          "type": "boolean"
        },
        "location": {
          "type": "string"
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "User_profile_projects": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "dateStart": {
          "type": "string"
        },
        "dateEnd": {
          "type": "string"
        },
        "githubUrl": {
          "type": "string"
        },
        "hostedUrl": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "User_profile_references": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "relationship": {
          "type": "string"
        },
        "contactInfo": {
          "type": "string"
        },
        "yearsKnown": {
          "type": "integer",
          "format": "int32"
        },
        "knownFromWhere": {
          "type": "string"
        }
      }
    },
    "User_profile": {
      "type": "object",
      "properties": {
        "experience": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User_profile_experience"
          }
        },
        "education": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User_profile_education"
          }
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User_profile_projects"
          }
        },
        "skills": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "references": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User_profile_references"
          }
        }
      }
    }
  }
}